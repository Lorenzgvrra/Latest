#include <iostream>
#include <string>
#include <limits>

using namespace std;

// Question structure
struct Question {
    string question;
    string options[4];
    char correctAnswer;
};

// Player data structure
struct Player {
    int id;
    string name;
    int score;
    string history;
};

// Linked List Node
struct PlayerNode {
    Player data;
    PlayerNode* next;
};

// Function Prototypes
void MainMenu();
void AddPlayer(PlayerNode*& head, PlayerNode*& tail, int& counter);
void PlayGame(PlayerNode* player);
void ViewRecords(PlayerNode* head);
void SearchPlayer(PlayerNode* head);
void DeletePlayer(PlayerNode*& head, PlayerNode*& tail);
void TraverseList(PlayerNode* head);
PlayerNode* FindPlayer(PlayerNode* head, int id);

// Question Bank (10 questions)
const int NUM_QUESTIONS = 10;
Question questions[NUM_QUESTIONS] = {
    {"What is the capital of France?", {"A) Paris", "B) London", "C) Rome", "D) Madrid"}, 'A'},
    {"Which planet is known as the Red Planet?", {"A) Earth", "B) Mars", "C) Jupiter", "D) Venus"}, 'B'},
    {"Who wrote 'Hamlet'?", {"A) Dickens", "B) Twain", "C) Shakespeare", "D) Austen"}, 'C'},
    {"What is 5 + 7?", {"A) 10", "B) 12", "C) 14", "D) 16"}, 'B'},
    {"Which gas do plants absorb?", {"A) Oxygen", "B) Nitrogen", "C) Carbon Dioxide", "D) Hydrogen"}, 'C'},
    {"Who painted the Mona Lisa?", {"A) Van Gogh", "B) Picasso", "C) Da Vinci", "D) Michelangelo"}, 'C'},
    {"Which element has symbol 'O'?", {"A) Gold", "B) Oxygen", "C) Silver", "D) Iron"}, 'B'},
    {"What is the largest ocean?", {"A) Atlantic", "B) Indian", "C) Arctic", "D) Pacific"}, 'D'},
    {"Square root of 64?", {"A) 6", "B) 7", "C) 8", "D) 9"}, 'C'},
    {"Which country has the Great Wall?", {"A) China", "B) India", "C) Japan", "D) Russia"}, 'A'}
};

// Main Function
int main() {
    MainMenu();
    return 0;
}

// Displays the Main Menu
void MainMenu() {
    PlayerNode* head = nullptr;
    PlayerNode* tail = nullptr;
    int counter = 1;
    int choice;

    do {
        cout << "\n--- Quiz Game Menu ---\n";
        cout << "1. Add Player\n";
        cout << "2. Play Game\n";
        cout << "3. View Records\n";
        cout << "4. Search Player by ID\n";
        cout << "5. Delete Player Record\n";
        cout << "0. Exit\n";
        cout << "Enter choice: ";
        cin >> choice;
        cin.ignore(numeric_limits<streamsize>::max(), '\n'); // Ignore newline characters

        switch (choice) {
            case 1:
                AddPlayer(head, tail, counter);
                break;
            case 2:
                PlayGame(head);
                break;
            case 3:
                ViewRecords(head);
                break;
            case 4:
                SearchPlayer(head);
                break;
            case 5:
                DeletePlayer(head, tail);
                break;
            case 0:
                cout << "Exiting the game. Goodbye!\n";
                return;
            default:
                cout << "Invalid choice, try again.\n";
        }
    } while (true);
}

// Add a new player
void AddPlayer(PlayerNode*& head, PlayerNode*& tail, int& counter) {
    PlayerNode* temp = new PlayerNode;
    cout << "Enter Player Name: ";
    getline(cin, temp->data.name);
    temp->data.id = counter++;
    temp->data.score = 0;
    temp->data.history = "";
    temp->next = nullptr;

    if (!head) {  // If list is empty
        head = temp;
        tail = temp;
    } else {
        tail->next = temp;
        tail = temp;
    }

    cout << "Player added successfully! ID: " << temp->data.id << endl;
}

// Play the game for an existing player
void PlayGame(PlayerNode* head) {
    int id;
    cout << "Enter Player ID: ";
    cin >> id;
    cin.ignore();

    PlayerNode* player = FindPlayer(head, id);
    if (!player) {
        cout << "Player not found.\n";
        return;
    }

    int score = 0;
    string history = "";
    cout << "\nStarting game for " << player->data.name << "!\n";

    for (int i = 0; i < NUM_QUESTIONS; i++) {
        cout << questions[i].question << endl;
        for (const auto& opt : questions[i].options) {
            cout << opt << endl;
        }

        char answer;
        cout << "Your answer (A/B/C/D): ";
        cin >> answer;
        answer = toupper(answer); // Convert to uppercase

        if (answer == questions[i].correctAnswer) {
            cout << "Correct!\n";
            score++;
            history += "Q" + to_string(i + 1) + ": Correct\n";
        } else {
            cout << "Wrong! Correct answer: " << questions[i].correctAnswer << endl;
            history += "Q" + to_string(i + 1) + ": Wrong\n";
        }
    }

    player->data.score = score;
    player->data.history = history;

    cout << "Game Over! Final Score: " << score << "/" << NUM_QUESTIONS << endl;
}

// View all player records
void ViewRecords(PlayerNode* head) {
    if (!head) {
        cout << "No players found.\n";
        return;
    }
    TraverseList(head);
}

// Search for a player by ID
void SearchPlayer(PlayerNode* head) {
    int id;
    cout << "Enter Player ID: ";
    cin >> id;
    cin.ignore();

    PlayerNode* player = FindPlayer(head, id);
    if (!player) {
        cout << "Player not found.\n";
        return;
    }

    cout << "\nPlayer ID: " << player->data.id << "\nName: " << player->data.name
         << "\nScore: " << player->data.score << "/10\nHistory:\n" << player->data.history << endl;
}

// Delete a player record
void DeletePlayer(PlayerNode*& head, PlayerNode*& tail) {
    int id;
    cout << "Enter Player ID to delete: ";
    cin >> id;
    cin.ignore();

    PlayerNode* curr = head;
    PlayerNode* prev = nullptr;

    while (curr) {
        if (curr->data.id == id) {
            if (curr == head) {
                head = head->next;
            } else {
                prev->next = curr->next;
            }
            if (curr == tail) {
                tail = prev;
            }
            delete curr;
            cout << "Player deleted successfully.\n";
            return;
        }
        prev = curr;
        curr = curr->next;
    }

    cout << "Player not found.\n";
}

// Helper Functions
void TraverseList(PlayerNode* head) {
    while (head) {
        cout << "ID: " << head->data.id << " | Name: " << head->data.name << " | Score: " << head->data.score << endl;
        head = head->next;
    }
}

PlayerNode* FindPlayer(PlayerNode* head, int id) {
    while (head && head->data.id != id) {
        head = head->next;
    }
    return head;
}
